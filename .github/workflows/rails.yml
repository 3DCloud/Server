name: Rails

on:
  push:
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Ruby and install gems
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Run linters
        run: |
          bundle exec rubocop --parallel

  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: 3dcloud
          POSTGRES_PASSWORD: 3dcloud
        ports:
          - 5432/tcp
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis
        ports:
          - 6379/tcp
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Ruby and install gems
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Run tests
        env:
          RAILS_ENV: test
          DB_HOST: localhost
          DB_PORT: ${{ job.services.postgres.ports['5432'] }}
          DB_USERNAME: 3dcloud
          DB_PASSWORD: 3dcloud
          REDIS_HOST: localhost
          REDIS_PORT: ${{ job.services.redis.ports['6379'] }}
        run: |
          bundle exec rails db:setup
          bundle exec rspec

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage.xml

  deploy:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Ruby and install gems
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Deploy
        run: |
          eval $(ssh-agent -s)
          ssh-add - <<< "${{ secrets.SSH_PRIVATE_KEY }}"
          bundle exec cap production deploy
